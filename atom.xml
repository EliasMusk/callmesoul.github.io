<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CallMeSoul</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://callmesoul.cn/"/>
  <updated>2019-12-25T02:18:15.199Z</updated>
  <id>https://callmesoul.cn/</id>
  
  <author>
    <name>CallMeSoul</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自主项目【51领养】</title>
    <link href="https://callmesoul.cn/posts/2/"/>
    <id>https://callmesoul.cn/posts/2/</id>
    <published>2019-12-25T02:10:03.000Z</published>
    <updated>2019-12-25T02:18:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为自己有养猫，对流浪动物啊也时常关注，想多多少少出一份力啊。</p><p>我逛了下一些宠物机构，发现了很多宠物机构，没有自己的宠物管理系统，用户难以线上浏览可以领养的宠物，且每个机构的可宠物信息并不共享，就一定程度上加大了用户领养的难度，想领养的人只能线下一间间跑，看有没有合缘的宠物领养。</p><p>而且一些个人的宠物生了，需找人领养，只能发发朋友圈，信息扩散程序可想而知，从而加大了领养的难度。</p><p>所以我就想做一产品，可以给想领养的人，在线上可以看到身边可以领养的宠物，看上了就具体线下了解。</p><p>也可以给一些没有技术支持的机构/个人提供一个宠物的发布等管理系统让领养可以跨上那么一小步。</p><h3 id="项目状态"><a href="#项目状态" class="headerlink" title="项目状态"></a>项目状态</h3><p>项目现已完成了基本功能上线，功能会不断的迭代更新。</p><p>大家微信搜索<code>51领养</code> 就可以查看，或者扫描一下小程序码即可</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/51adopt/gh_c80bd343213b_344.jpg" alt="文件无法预览。"></p><h3 id="宣传"><a href="#宣传" class="headerlink" title="宣传"></a>宣传</h3><p>项目刚上线啊，也不知道怎么宣传好，大家可以给给意见。</p><p>我自己做了张海报，不嫌弃的可以帮忙宣传下。</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/51adopt/51%E9%A2%86%E5%85%BB%E5%AE%A3%E4%BC%A0%E6%B5%B7%E6%8A%A5.jpg" alt="文件无法预览。"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;因为自己有养猫，对流浪动物啊也时常关注，想多多少少出一份力啊。&lt;/p&gt;
&lt;p&gt;我逛了下一些宠物机构，发现了很多宠物机构，没有自己的宠物管理系
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webpack使用html-loader引入html模板</title>
    <link href="https://callmesoul.cn/posts/100000/"/>
    <id>https://callmesoul.cn/posts/100000/</id>
    <published>2019-12-04T08:32:57.000Z</published>
    <updated>2019-12-09T08:04:45.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在打一个多页面的手脚架，因为经常会接到一两个页面的临时活动的开发需求。</p><p>vue开发栈喜欢了，想用vue来开发，有感觉有点累赘，大材小用的感觉。</p><p>直接新建个html，手撸起来又各种问题，导致开发效率低下，例如:</p><ul><li>平时用惯了es6语法，要写回es5,要经常查文档</li><li>不能使用预处理样式(less,sass)，这个效率大打折扣啊</li><li>手动页面优化(压缩，去除注释,检测语法)</li></ul><p>本着现代开流，还是自己根据自己的需求撸个基于webpack的多页面开发手脚架，虽然没用vue，但是开发的流程基本跟vue开发流程一直，能自动化的部分都自动化，能提高开发效率的都用上，以后再也这类需求，就直接拉下手脚架，开发就行，不用再另外一个个配置了。</p><p>本以为大功告成，却忽略了一个问题，就是有时几个页面的头部或者底部是共用的，这时候需要分离出来，不然三个页面个三个一样的头部，要修改头部时也要修改三个页面，这很不好维护。</p><p>于是乎就寻找各种方案了</p><h3 id="html-引入模板"><a href="#html-引入模板" class="headerlink" title="html 引入模板"></a>html 引入模板</h3><ol><li><p>iframe</p><p>首先淘汰了这种方法，因为iframe算是历史遗留产物，而且会引起许多的bug，能不用还是不用吧。对iframe真心没好感。</p></li><li><p>模板引擎</p><p>这是开始确认的方向，因为之前玩node用过ejs，使用起来简单方便，于是乎在网上找了各种方案，但还是没找到合适的。</p><ul><li>一种是基于一个布局模板去生成html，但这不够灵活啊，不是所有的页面都一定要基于那个模板，比如有几个页面公用一个头部，另一个页面公用另一个头部这样，我能根据自己需求来引入才是完美的，而且ejs并没有继承的功能，不能再一个模板上追加内容，也是个大问题。</li><li>第二种就是项目直接全部用ejs，webpack解析打包成html。虽然解决了上面的问题.但对于前端开发来说不是很友好，都变成了.ejs后缀了，最终还是舍弃了。</li></ul></li><li><p>html-loader 的  interpolate</p><p>html-loader 大部分人都有用，甚至在解决这个问题前我自己也用了，但大部分人都想我一样，用来处理html文件中的静态资源文件，但其实有一个引入模板的功能。</p><p>首先要在webpack rules里加上加一条处理html的规则</p><pre><code class="javascript">{      test: /\.html$/,      use: {        loader: &#39;html-loader&#39;,        options: {          // 处理html 引用的图片          attrs: [&#39;img:src&#39;],          // 开启 html模板功能          interpolate: true        }      }    }</code></pre></li></ol><p>   然后在html文件就可以直接引入其他html模板了</p><pre><code class="html">   &lt;!DOCTYPE html&gt;   &lt;html&gt;   &lt;head&gt;     &lt;title&gt;index&lt;/title&gt;     ${require(&quot;../layouts/head.html&quot;)}   &lt;/head&gt;     ${require(&quot;../layouts/header.html&quot;)}   &lt;body&gt;     ${require(&quot;../layouts/footer.html&quot;)}   &lt;/body&gt;   &lt;/html&gt;</code></pre><p>   简单又灵活，Get it！</p><p>​        最后也分享下自己配置好手脚架：<strong><a href="https://github.com/callmesoul/webpack-multiple-pages-template" target="_blank" rel="noopener">webpack-multiple-pages-template</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在打一个多页面的手脚架，因为经常会接到一两个页面的临时活动的开发需求。&lt;/p&gt;
&lt;p&gt;vue开发栈喜欢了，想用vue来开发，有感觉有点累
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用headless cms + ssr渲染框架来开发网站</title>
    <link href="https://callmesoul.cn/posts/12005/"/>
    <id>https://callmesoul.cn/posts/12005/</id>
    <published>2019-11-25T03:15:44.000Z</published>
    <updated>2019-12-09T08:04:45.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于我是一名前端开发者，偶尔会接一些私单，最主要的无非就是帮人做网站了。</p><h5 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h5><p>根据以前的经验无非就是前端写完界面，然后找一个cms去套，但由于国内的cms框架（duxcms我之前一直用,dedecms.phpcms,wordpress）已经很难满足了现在的客户需求了。</p><p>比如做个网站，一开始以为做个网站就行，谁知道还要做小程序，App等等，但之前的cms都不带api，即使有写带比如wordpress，api接口也是问题多多的。</p><p>然后可以看国内开发的cms，即使的新开发新产品，也是比较保守的，还是跟以前的cms差不多，无非就多提供了api 供用户调用，然后后台操作界面交互也不咋地，所以很难找到一款非常合适的cms框架。</p><p>​        而我感觉国外的就比较思想超前敢冒险尝试，既然api方式通用，那我就专门做提供api和后台内容操作的cms，数据和界面教还给前端，自己爱拿什么数据那什么数据，唉什么布局怎么布局，前后分离。然后cms就专心做好内容管理和api接口的设计就可以了。</p><p>虽然这个想法早期还有点冒险，比较像这种前后端分离的<code>spa</code>还有有很多问题的</p><ul><li>做网站的人很看重的seo问题</li><li>首屏加载速度问题</li></ul><p>问题虽然有，但方向应该是对的，就看怎么解决这些问题而已。</p><h5 id="为什么写网站也要用spa"><a href="#为什么写网站也要用spa" class="headerlink" title="为什么写网站也要用spa"></a>为什么写网站也要用spa</h5><p>​        而且平时在公司或者自己写前端，写法习惯都已经从jq过渡到了前后端分离框架<code>vue</code>、<code>react</code>、<code>angular</code>等写法的习惯了。然后接了一个私单，又要突然转回去以前那种<code>jq</code>操作<code>dom</code>的 时代。</p><p>这个过程实在难受，而且效率也低。</p><p>有没有办法开发个网站也能使用现代化的开发流程和各种工具，然后解决seo，和首屏加载慢等<code>spa</code>问题的。</p><p>于是乎后面出现了各种<code>ssr</code>服务端渲染框架，去帮spa应用解决这些问题。</p><h3 id="SSR-服务端渲染框架"><a href="#SSR-服务端渲染框架" class="headerlink" title="SSR 服务端渲染框架"></a>SSR 服务端渲染框架</h3><p> 使用SSR（也称为“通用”或“同构”）模式，将使用Node.js服务器将基于Vue组件的HTML传递给客户端，而不是纯JavaScript。   — nuxt.js</p><p>目前主流有两个:</p><ul><li>vue 架构的 <a href="https://zh.nuxtjs.org/" target="_blank" rel="noopener">nuxt</a></li><li>react 机构的 <a href="https://nextjs.frontendx.cn/" target="_blank" rel="noopener">next</a></li></ul><p>两个都是开箱即用的，大大降低了开发部署的难度。</p><p>主要用那个技术栈就用那个框架吧，react好像还有个 <code>gatsby</code>好像挺好用，但我不主要react技术栈 ，所以就没深入了解了，看了文档和别人介绍感觉挺不错的，react技术栈的同学可以去了解下。</p><p>前端的开发框架我们选好了，然后我们就要选个后端的cms 去管理数据，提供api接口调用数据了。</p><p>我们先来想一下我们期待的cms是怎样的:</p><ul><li><p>内容可定制化程度高，因为网站有各种功能，比如轮播的海报，收集用户表单，新闻站的文章，画册张的相册等。</p></li><li><p>后台交互良好，至少交付给客户时，客户很快有会用。</p></li><li><p>良好的api接口设计</p></li><li><p>对<code>gatsby</code>友好</p></li><li><p>提供全平台sdk</p></li></ul><h3 id="headless-cms"><a href="#headless-cms" class="headerlink" title="headless cms"></a>headless cms</h3><p> 翻译一下就是只提供纯api的cms，不包含任何客户端代码，也就是老子只负责api你手机，还是网页想咋用咋用。 —  摘抄自<a href="https://www.jianshu.com/p/ac7caffe3931" target="_blank" rel="noopener">北方蜘蛛</a></p><h5 id="Contentful"><a href="#Contentful" class="headerlink" title="Contentful"></a><a href="https://www.contentful.com/" target="_blank" rel="noopener">Contentful</a></h5><p>你搜headless cms，然后到处都能看得到<a href="https://www.contentful.com/" target="_blank" rel="noopener">Contentful</a></p><p>来说说它的强大之处：</p><ul><li><h3 id="API-First-CMS-to-Power-All-Digital-Products-Contentful"><a href="#API-First-CMS-to-Power-All-Digital-Products-Contentful" class="headerlink" title="API-First CMS to Power All Digital Products | Contentful"></a><a href="http://www.baidu.com/link?url=U4F_e7OMQNL_JvtG6ojIW93MqoiriddS2TxnmcxkEHmT6Rx3ek4Rk_Lsp8ZRdA4z" target="_blank" rel="noopener">API-First CMS to Power All Digital Products | <em>Contentful</em></a></h3><p>简单翻译就是第一个只提供api的cms吧，先做有经验优势嘛</p></li><li><p>免费，不用自己部署，但有一定限制</p></li><li><p>Serverless 架构部署，可能就是用了serverless 才有可能有免费的提供用吧</p></li><li><p>提供restful 接口 + graaphql 接口</p></li><li><p>支持多站点，多项目，但需另外收费。</p></li></ul><p>可以说<code>contentful</code>是个先进技术集合的cms，各种现代化技术集合一体。</p><p>然后操作界面也比较简单简洁，感觉是挺不错的，操作还是流畅的，还提供多角色共同管理。</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/image-20191114163315536.png" alt="image-20191114163315536"></p><p>但作为接私单来开发网站还是有些问题的:</p><ul><li><p>不开源，所以不可以自己部署。你做完交接，要客户登陆别人的网站去管理，这样不大好吧。</p></li><li><p>后台管理不支持中文，怕客户看不懂，不好操作。</p></li><li><p>不收费的有限制，感觉以后也会慢慢变成收费的，收费项又确实比较贵</p></li><li><p>暂时没看到内容的导出与导入</p></li></ul><h5 id="strapi"><a href="#strapi" class="headerlink" title="strapi"></a><a href="https://strapi.io/" target="_blank" rel="noopener">strapi</a></h5><p>我试了挺久的一个，功能也简单，界面也简洁。</p><p>优势:</p><ul><li><p>开源免费，可以自己部署</p></li><li><p>简单又便捷，添加内容模型，添加内容，然后设置用户对这个内容接口的权限就好了</p></li><li><p>规范的restful接口，且接口信息简洁，没有返回其他很多没有必要的东西</p><pre><code class="json">///banners[    {        &quot;id&quot;: 1,        &quot;title&quot;: &quot;轮播海报&quot;,        &quot;link&quot;: &quot;sadasdasdasd&quot;,        &quot;created_at&quot;: &quot;2019-11-14T07:19:50.350Z&quot;,        &quot;updated_at&quot;: &quot;2019-11-14T07:19:50.350Z&quot;,        &quot;image&quot;: {            &quot;id&quot;: 1,            &quot;name&quot;: &quot;teacher-avatar.gif&quot;,            &quot;hash&quot;: &quot;466289966ffd4599afd646ede29bac40&quot;,            &quot;sha256&quot;: &quot;kgeU5VQ-bYTbtNlEwoTi_4LPykpIPxrtZLtlL-ehyAY&quot;,            &quot;ext&quot;: &quot;.gif&quot;,            &quot;mime&quot;: &quot;image/gif&quot;,            &quot;size&quot;: &quot;1.48&quot;,            &quot;url&quot;: &quot;/uploads/466289966ffd4599afd646ede29bac40.gif&quot;,            &quot;provider&quot;: &quot;local&quot;,            &quot;provider_metadata&quot;: null,            &quot;created_at&quot;: &quot;2019-11-14T07:19:50.471Z&quot;,            &quot;updated_at&quot;: &quot;2019-11-14T07:19:50.471Z&quot;        }    }]</code></pre></li><li><p>后台字段布局可自由拖动布局</p></li><li><p>有国际化，虽然中文的有些翻译有些蹩脚，有些也没翻译，但总比全英文好啊</p></li><li><p>也提供Graphql接口</p><p>感觉<code>strapi</code>虽简洁，简单，但功能齐全</p></li></ul><p>个人感觉的缺点：</p><ul><li><p>不支持多站点多项目</p><p>比如我想自己搭一个数据管理中心，给个各个网站使用，每个网站都有新闻内容模块</p><p>这时候我不能建一个新闻内容模块一起用，这样数据就混乱了。只能布置多个strapi或者新建多个新闻内容模块，以区分不同网站的新闻内容模块。</p><p>其实有考虑过根据新闻模块关联用户、根据用户去区分新闻模块对应的数据，这是一个可行的方法。但只只对没有用户系统的站点或项目，不然就又轮到用户信息混乱了。</p><p>但是用户又可以根据用户组去区分，感觉还是可以实现的-&gt;</p><p>根据添加不同用户组然后添加用户，去区分不同的网站，从而去同一个内容模型拿对应的内容数据</p><p>但说回来，要不同项目用统一个模型，两个项目的统一模型要高度统一，不然还是有很多问题的。</p><p>期待strapi后面可以有站点或者项目的概念，在站点或项目下，再去新建不同的内容模型，这就完美了。</p></li></ul><h3 id="ghost"><a href="#ghost" class="headerlink" title="ghost"></a><a href="https://ghost.org/" target="_blank" rel="noopener">ghost</a></h3><p>我用过算最好的博客系统吧，性能飞跃，后台管理、写作交互,体验都完美，也有很多很漂亮的，后来因为服务器到期了，续费太贵了，于是才把博客迁移到了<code>hexo</code>+<code>github pages</code> 免服务器啊，还可以<code>https</code>，当然速度和原来的没法比啊。而且你<code>github</code> 搜 <code>nodejs</code> 的 <code>headless cms</code> 第一名就是<code>ghost</code>,第二是``strapi`</p><p>个人感觉的优点:</p><ul><li>简单简洁，为博客而生，主要就添加文章或页面</li><li>完美的写作体验，完美兼容<code>markdown</code>和<code>html</code> 写作,也可以一篇文章即<code>html</code>又有<code>markdown</code></li><li>主题精美，速度飞快，后台操作也很友好</li><li>即提供服务端渲染，也提供api</li><li>代码开源，却已盈利</li><li>完善的开发手脚架，不仅可以初始项目，更包括集成 <code>Let&#39;s Encrypt</code> 自动帮你生成ssl证书，配置nginx ssl配置,等等……</li></ul><p>个人感觉的缺点:</p><ul><li>主要专注于博客，对于一些网站的其他功能还是显得有些不足。可扩展性不强。</li><li>虽提供api，但不是<code>restful</code> 规范的</li><li>主题虽精美，但相对于<code>wordpress</code> 还是相对较少的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于我是一名前端开发者，偶尔会接一些私单，最主要的无非就是帮人做网站了。&lt;/p&gt;
&lt;h5 id=&quot;CMS&quot;&gt;&lt;a href=&quot;#CMS&quot; c
      
    
    </summary>
    
    
    
      <category term="frontend" scheme="https://callmesoul.cn/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Frontend-Sniper前端错误上报系统</title>
    <link href="https://callmesoul.cn/posts/64826/"/>
    <id>https://callmesoul.cn/posts/64826/</id>
    <published>2019-10-21T00:57:01.000Z</published>
    <updated>2019-12-09T08:04:45.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端错误监控系统服务端"><a href="#前端错误监控系统服务端" class="headerlink" title="前端错误监控系统服务端"></a>前端错误监控系统服务端</h3><p>其实线上已经有很多监控系统了，例如<a href="https://www.fundebug.com/" target="_blank" rel="noopener">fundebug</a>。试用了一下还是挺不错的。<br>可惜都是收费的，免费的只能创建一个项目，收费也不便宜。<br>对于一些小公司来说很难花钱去搞，而且对小公司来说功能也不需要太复杂。<br>一些js的报错和接口报错就可以大大加快bug的修复，和预知bug。（当上级和测试都还没发现时）<br>所以我还是写这么个系统，是从自身需求出发吧。功能可以慢慢完善。</p><p>现在初期只实现了简单的js和接口资源报错。后期会加入UA和用户等信息以完善错误信息追踪错误。<br>对服务端还是新手所以代码质量….graphql也是试手。<br>但好在错误监控系统一般内部人使用，独立不影响线上项目和用户。所以大胆地使用吧。</p><h2 id="项目集"><a href="#项目集" class="headerlink" title="项目集"></a>项目集</h2><ul><li>服务端 <a href="https://github.com/callmesoul/frontend-sniper-server" target="_blank" rel="noopener">frontend-sniper-server</a></li><li>管理后台 <a href="https://github.com/callmesoul/frontend-sniper-admin" target="_blank" rel="noopener">frontend-sniper-admin</a></li><li>错误探针 <a href="https://github.com/callmesoul/better-js" target="_blank" rel="noopener">better-js</a></li></ul><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li><input checked="" disabled="" type="checkbox"> 支持vue</li><li><input checked="" disabled="" type="checkbox"> 邮件通知（新错误报错，旧错误5n次发邮件报错）</li><li><input disabled="" type="checkbox"> 添加UA信息</li><li><input disabled="" type="checkbox"> 添加用户信息</li><li><input checked="" disabled="" type="checkbox"> 记录用户行为</li><li><input disabled="" type="checkbox"> 手动上传报错</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端错误监控系统服务端&quot;&gt;&lt;a href=&quot;#前端错误监控系统服务端&quot; class=&quot;headerlink&quot; title=&quot;前端错误监控系统服务端&quot;&gt;&lt;/a&gt;前端错误监控系统服务端&lt;/h3&gt;&lt;p&gt;其实线上已经有很多监控系统了，例如&lt;a href=&quot;https://
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>一起用失效</title>
    <link href="https://callmesoul.cn/posts/24625/"/>
    <id>https://callmesoul.cn/posts/24625/</id>
    <published>2019-10-21T00:54:28.000Z</published>
    <updated>2019-12-09T08:04:45.365Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>重复多条记录问题</title>
    <link href="https://callmesoul.cn/posts/41967/"/>
    <id>https://callmesoul.cn/posts/41967/</id>
    <published>2019-10-21T00:52:53.000Z</published>
    <updated>2019-12-09T08:04:45.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-group-by-和-order-by-一起用失效"><a href="#mysql-group-by-和-order-by-一起用失效" class="headerlink" title="mysql group by 和 order by 一起用失效"></a>mysql group by 和 order by 一起用失效</h1><p>我自己写了一个前端错误监控系统。</p><p>前端有各种报错，后台就会自动发邮件通知、</p><p>这里就会遇到同一个错误可能很多人遇到，或者同一个人遇到很多次。</p><p>这样同一个错误就会有很多次报错。</p><p>当管理员进入后台时，看到很多同一个错误的报错，这很明显不人性化。</p><p>于是我就设计成，同一个错误的合并，只显示最新那个。</p><p>一开始sql写法为</p><pre><code class="sql">SELECT * from `errors` GROUP BY `title`,`msg`,`category`,`level`,`appId`  ORDER BY `createdAt` DESC</code></pre><p>发现同一个错误是合并了，但是 ORDER BY 并没有生效，合并后的错误不是最新的一条错误而是最早的一条。于是查了资料发现，GROUP BY 没有排序功能，默认取合并时的第一条。于是就想到了，先排序完再合并就好了，于是有下面代码：</p><pre><code class="sql">SELECT * FROM (SELECT `errors`.*,`apps`.name from `errors` LEFT JOIN `apps` ON `errors`.`appId`=`apps`.`id` WHERE `apps`.userId=1  ORDER BY `createdAt` DESC ) as result GROUP BY `title` ORDER BY `createdAt` DESC</code></pre><p>但发现还是没用啊，我百度了下，很多人也是这样写的，但为什么就不生效呢？经过一番查找，终于找到原因了，mysql版本的问题，以上的代码在5.6或以下的代码应该都可以的，但在5.7则要加limit条件，不然子查询是不执行的，完整代码如下</p><pre><code class="sql">SELECT * FROM (SELECT `errors`.*,`apps`.name from `errors` LEFT JOIN `apps` ON `errors`.`appId`=`apps`.`id` WHERE `apps`.userId=1  ORDER BY `createdAt` DESC LIMIT 100) as result GROUP BY `title` ORDER BY `createdAt` DESC</code></pre><p>是不是很坑。。。</p><p>记下先</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql-group-by-和-order-by-一起用失效&quot;&gt;&lt;a href=&quot;#mysql-group-by-和-order-by-一起用失效&quot; class=&quot;headerlink&quot; title=&quot;mysql group by 和 order by 一起用失
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用HTTPCODE替换自定义CODE</title>
    <link href="https://callmesoul.cn/posts/51837/"/>
    <id>https://callmesoul.cn/posts/51837/</id>
    <published>2019-10-21T00:47:58.000Z</published>
    <updated>2019-12-09T08:04:45.361Z</updated>
    
    <content type="html"><![CDATA[<p>| 前言：现在的开发基本都是前后端分离的项目，既解放了前后台各自的生产力（后台专注写业务给出数据就行，再也不用管前端UI的事。前台专注于写UI拿数据就行，再也不用跑后台服务，不用打开eclipse了）又可以一套代码兼容多个项目：APP，网页，微信，微信小程序等。</p><p>但在开发的过程中发现了，现在后台普遍用了自定义code去判断接口的成功失败信息。而http code则变成鸡脖，除非是服务器蹦了之外，其他一律返回200成功。为什么会有这个现状呢？具体不是很了解啊，据说是以前IE上有些http code报错会导致IE一些问题。不知道是不是，知道的可以给我科普下。</p><p>而在开发中使用自定义code也并没有什么问题，例如我们的项目一般接口返回的response信息完整结构：</p><pre><code class="javascript">{    data:{        data:{            userList:[                {id:1}            ]        },        rcode: 300,        message: &quot;操作成功&quot;    },    engine:&#39;.....&#39;,    headers:{//....},    request:{//....},    status:200,    statusText:&quot;request:ok&quot;}</code></pre><p>而我们开发中一般用一个拦截器去拦截接口中的错误和返回接口要用的东西，不用的heades我们就不返回了。例如:</p><pre><code class="javascript">response.use(  (response) =&gt; {    if(response.data.rcode===405){      //统一处理某个自定义错误code    }else{      return response.data;//返回我们要用的数据      promise.resolve();    }  },  (err) =&gt; {    //httpcode 错误 默认返回200，所以只要处理500以上的服务器问题即可    //发生网络错误后会走到这里    if(err.status&gt;=500){       //统一处理某个httpcode 500以上错误    }  });</code></pre><p>使用了拦截器后我们正常得到的数据格式如下:</p><pre><code class="javascript">{        data:{            userList:[                {id:1}            ]        },        rcode: 300,        message: &quot;操作成功&quot;},</code></pre><p>但我们请求完数据后必须判断rcode是否成功才好操作,否则会报错，例如</p><pre><code class="javascript">let res=await this.api.getUserList();if(res.data.rcode==300){//要先判断是否成功,否则失败下面语句会报错找不到&#39;userList&#39;，接口失败是没有返回userList的        this.userList=res.data.userList;}</code></pre><p>以上就基本大部分公司的写法，也没什么问题。但写多了（例如：100个接口）就会发现,100个接口，前端就要写100个<code>if(res.data.rcode==300)</code>。能不能有办法优化下。</p><p>后来用接触了nodejs 自己写后台接口发现是可以优化的，而且对于接口比较多的项目，效率可以大大的提高，对于前后台都是。那就是用httpcode替换自定义的code。</p><h3 id="先来说说httpcode相对于自定义code的好处"><a href="#先来说说httpcode相对于自定义code的好处" class="headerlink" title="先来说说httpcode相对于自定义code的好处"></a>先来说说httpcode相对于自定义code的好处</h3><ol><li>规范，httpcode的规范有国际的规范，百度搜一下就有。而使用自定义code规范都是自己定的，而且每个项目的定义code的字段，每个值的规范也不一样容易混乱。如果每个项目都用httpcode 都用国际的规范这样是不是会好很多？</li><li>对于后端开发来说使用httpcode可以大大增加效率，例如：</li></ol><ul><li><p>使用自动code时输出数据</p><pre><code>//成功时this.body={  data:{      userList:[{id:1}]  },  rcode:300,  msg:&#39;成功&#39;}//失败时this.body={  rcode:400,  msg:&#39;失败&#39;}</code></pre></li><li><p>使用httpcode是，因为默认输出都是200，只有错误的的是否才需要去定义错误码：</p><pre><code>//成功时this.body={    userList:[{id:1}]}//失败时this.status=400;this.body={    msg:&#39;失败&#39;}</code></pre><p>你可能以为也就简单了那么点事，可是当有100个接口时呢？效率就是从这里来的啊</p></li></ul><p>  对于前端开发来说使用httpcode也可以大大增加效率，例如：</p><p>  拦截器就不用去判断自定义code 而直接判断httpcode：</p><pre><code class="javascript">  response.use(    (response) =&gt; {      if(response.data.rcode===405){        //统一处理某个自定义错误code      }else{        return response.data;//返回我们要用的数据        promise.resolve();      }    },    (err) =&gt; {      //httpcode 错误 默认返回200，所以只要处理500以上的服务器问题即可      //发生网络错误后会走到这里      if(err.status===400){        //统一处理某个httpcode 错误      }else if(err.status&gt;=500){         //统一处理某个httpcode 500以上错误      }    }  );</code></pre><p>然后再来对比下使用httpcode和使用自定义code的数据个操作：</p><pre><code class="javascript">//自定义code时返回数据{        data:{            userList:[                {id:1}            ]        },        rcode: 300,        message: &quot;操作成功&quot;}//httpcode时返回数据{        userList:[                {id:1}            ]},//自定义code时操作let res=await this.api.getUserList();if(res.data.rcode==300){//要先判断是否成功,否则失败下面语句会报错找不到&#39;userList&#39;，接口失败是没有返回userList的        this.userList=res.data.userList;}//httpcode时操作let res=await this.api.getUserList();if(res){//要先判断是否成功,否则失败下面语句会报错找不到&#39;userList&#39;，接口失败是没有返回userList的        this.userList=res.userList;}</code></pre><p>虽然感觉就优化了那么点，但真正写起来，那么多个接口，你就会感觉显明方便多，效率也快乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;| 前言：现在的开发基本都是前后端分离的项目，既解放了前后台各自的生产力（后台专注写业务给出数据就行，再也不用管前端UI的事。前台专注于写UI拿数据就行，再也不用跑后台服务，不用打开eclipse了）又可以一套代码兼容多个项目：APP，网页，微信，微信小程序等。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>坑吭记录</title>
    <link href="https://callmesoul.cn/posts/12004/"/>
    <id>https://callmesoul.cn/posts/12004/</id>
    <published>2019-10-21T00:44:58.000Z</published>
    <updated>2019-12-09T08:04:45.360Z</updated>
    
    <content type="html"><![CDATA[<ul><li>苹果IOS系统分享配置失败，签名错误</li></ul><p>原因：苹果IOS系统下，页面跳转时，路由跳转但地址并没有变，还是进入程序的第一个地址，所以签名的地址！=当前页面地址 所以错误了。</p><p>解决:就是手动把url改了，先建一个mixins插件，然后以后那个页面需要分享就引入这个插件就可以了。</p><pre><code class="javascript">// assign.js//ios端 histiry 模式兼容问题const location = global.locationconst u = navigator.userAgent let isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端let baseUrl=process.env.BASE_URL.substring(0,process.env.BASE_URL.length-1); // 兼容自定义 BASE_URLexport default {  beforeRouteEnter(to, from, next) {    if (isiOS &amp;&amp; baseUrl+to.path !== location.pathname) {//只要ios需要处理，其他跳过      // 此处不能使用location.replace        location.assign(baseUrl+to.fullPath)      //location.replace (baseUrl+to.fullPath)       //重定向时用location.replace 其他用location.assign    } else {      next()    }  }}</code></pre><ul><li>IOS 滚动穿透问题：就是非body滚动时，其他其他浮层滚动，会穿透，时body滚动。</li></ul><p>原因：我也不知道啊，为什么这么设计，我也不敢问，也不敢说。</p><p>解决：</p><pre><code class="javascript">// 打开浮层时调用closeTouch阻止body事件，关闭时调用openTouch 恢复{    data:{        //...        handler: function (e) {          e.preventDefault()        }    },    methods:{        /* 解决iphone页面层级相互影响滑动的问题 */      closeTouch: function () {        document.getElementsByTagName(&#39;body&#39;)[0].addEventListener(&#39;touchmove&#39;,          this.handler, { passive: false })// 阻止默认事件      },      openTouch: function () {        document.getElementsByTagName(&#39;body&#39;)[0].removeEventListener(&#39;touchmove&#39;,          this.handler, { passive: false })// 打开默认事件      },    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;苹果IOS系统分享配置失败，签名错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原因：苹果IOS系统下，页面跳转时，路由跳转但地址并没有变，还是进入程序的第一个地址，所以签名的地址！=当前页面地址 所以错误了。&lt;/p&gt;
&lt;p&gt;解决:就是手动把url改了，先建一个mixins插
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flex 布局问题汇总</title>
    <link href="https://callmesoul.cn/posts/794/"/>
    <id>https://callmesoul.cn/posts/794/</id>
    <published>2019-10-14T08:24:03.000Z</published>
    <updated>2019-12-09T08:04:45.353Z</updated>
    
    <content type="html"><![CDATA[<p>flex布局使用起来很方便\n而且现在的浏览器也基本支持了<br>大家可放心用起来。<br>但用了flex总会有一些小问题<br>这里总结下再使用flex时遇到的问题：</p><h3 id="flex下-input-宽度无法自适应："><a href="#flex下-input-宽度无法自适应：" class="headerlink" title="flex下 input 宽度无法自适应："></a>flex下 input 宽度无法自适应：</h3><pre><code class="javascript">   &lt;div class=&#39;flex&#39;&gt;            &lt;input class=&#39;flex1&#39;&gt;    &lt;button&gt;提交&lt;/button&gt;  &lt;/div&gt;</code></pre><p>以上代码在有写浏览器上input宽度不能自适应，导致了input和button宽度固定，如果button的自多点就会超出了父div的宽度了。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li><p>添加<code>min-width:0;</code>网上说的，但试了下并不行</p></li><li><p>添加div包裹即可（推荐）</p><pre><code class="javascript">  &lt;div class=&#39;flex&#39;&gt;          &lt;div class=&#39;flex1&#39;&gt;&lt;input style=&#39;width:100%&#39;&gt;&lt;/div&gt;                &lt;button&gt;提交&lt;/button&gt;                    &lt;/div&gt;                      ```### flex 下`text-overflow: ellipsis;`不生效```javascript  &lt;div class=&#39;flex&#39;&gt;          &lt;label&gt;标题&lt;/label&gt;                  &lt;div class=&#39;flex1&#39; style=&#39;text-overflow: ellipsis;overflow:hidden;white-space: nowrap;&#39;&gt;奥术大师多按时发斯蒂芬斯蒂芬斯蒂芬斯蒂芬是否水电费水电费水电费水电费水电费水电费水电费水电费&lt;/div&gt;\n    &lt;/div&gt;\n    ```\n    以上的div还是不能让`text-overflow: ellipsis`生效\n    \n    #### 解决方法\n    \n    - 父flex加`min-width:0;`\n      ```javascript\n        &lt;div class=&#39;flex&#39; style=&#39;min-width:0;&#39;&gt;\n            &lt;label&gt;标题&lt;/label&gt;\n            &lt;div class=&#39;flex1&#39; style=&#39;text-overflow: ellipsis;overflow:hidden;white-space: nowrap;&#39;&gt;奥术大师多按时发斯蒂芬斯蒂芬斯蒂芬斯蒂芬是否水电费水电费水电费水电费水电费水电费水电费水电费&lt;/div&gt;\n        &lt;/div&gt;\n      ```</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;flex布局使用起来很方便\n而且现在的浏览器也基本支持了&lt;br&gt;大家可放心用起来。&lt;br&gt;但用了flex总会有一些小问题&lt;br&gt;这里总结下再使用flex时遇到的问题：&lt;/p&gt;
&lt;h3 id=&quot;flex下-input-宽度无法自适应：&quot;&gt;&lt;a href=&quot;#flex下-in
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>H5、微信开发video填坑</title>
    <link href="https://callmesoul.cn/posts/13681/"/>
    <id>https://callmesoul.cn/posts/13681/</id>
    <published>2019-10-14T08:22:50.000Z</published>
    <updated>2019-12-09T08:04:45.359Z</updated>
    
    <content type="html"><![CDATA[<p>“<ul></p><li>ios系统下，视频播放默认全屏播放<br>解决方法：加上<code>x5-playsinline=&quot;&quot; playsinline=&quot;&quot; webkit-playsinline=&quot;&quot;</code></li></ul>"]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“&lt;ul&gt;&lt;/p&gt;
&lt;li&gt;ios系统下，视频播放默认全屏播放&lt;br&gt;
解决方法：加上&lt;code&gt;x5-playsinline=&amp;quot;&amp;quot; playsinline=&amp;quot;&amp;quot; webkit-playsinline=&amp;quot;&amp;quot;&lt;/co
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>REM自适应</title>
    <link href="https://callmesoul.cn/posts/52063/"/>
    <id>https://callmesoul.cn/posts/52063/</id>
    <published>2019-10-14T08:14:57.000Z</published>
    <updated>2019-12-09T08:04:45.359Z</updated>
    
    <content type="html"><![CDATA[<p>designSize=640 为设计稿大小<br>htmlFontSize=100为当设计稿为640px时html font-size为100px<br>(建议默认100，因为好换算,10也可以，但pc有些浏览器会不支持12px以下字体，所用100最安全)<br>此时1px=0.01rem;</p><pre><code> (function(doc, win, designSize,htmlFontSize) {        var docEl = doc.documentElement,                isIOS = navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/),                dpr = isIOS ? Math.min(win.devicePixelRatio, 3) : 1,                dpr = window.top === window.self ? dpr : 1, //被iframe引用时，禁止缩放                resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize';        docEl.dataset.dpr = dpr;        var recalc = function() {          var width = docEl.clientWidth;          if (width / dpr &gt; designSize) {            width = designSize * dpr;          }          docEl.dataset.width = width;          docEl.dataset.percent = htmlFontSize * (width / designSize);          docEl.style.fontSize = htmlFontSize * (width / designSize) + 'px';        };        recalc();        if (!doc.addEventListener) return;        win.addEventListener(resizeEvt, recalc, false);      })(document, window,640,100);      ```</code></pre>"]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;designSize=640 为设计稿大小&lt;br&gt;
htmlFontSize=100为当设计稿为640px时html font-size为100px&lt;br&gt;
(建议默认100，因为好换算,10也可以，但pc有些浏览器会不支持12px以下字体，所用100最安全)&lt;br&gt;
此时
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序开发-使用editor组件替换第三方富文本组件</title>
    <link href="https://callmesoul.cn/posts/43892/"/>
    <id>https://callmesoul.cn/posts/43892/</id>
    <published>2019-10-08T16:44:19.000Z</published>
    <updated>2019-12-09T08:04:45.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小程序富文本问题"><a href="#小程序富文本问题" class="headerlink" title="小程序富文本问题"></a>小程序富文本问题</h3><p>因为小程序用的不是html标签，，所以市面上的富文本编辑器都不适用，自己改起来也麻烦，大多都是小程序嵌入webview方式解决的富文本编辑框来实现，局限比较大。</p><p>还有个问题就是渲染富文本内容也就是html，前期哟很多第三方组件解决了这个问题  ，例如：<code>htmlparse</code>  等，但大多这些第三方组件也只是解决富文本的的渲染问题，而且性能也较大问题，编辑富文本一直是一个硬伤。最近期小程序推出了<code>editor</code>组件，就能基本解决以上问题，代替市面上第三方的关于小程序富文本插件。</p><p>本文就主要讲解下怎么用editor组件，封装一个自定义的富文本组件，既可以渲染html富文本，又可以变成富文本编辑框。</p><h3 id="editor"><a href="#editor" class="headerlink" title="editor"></a>editor</h3><p>关于editor组件的使用可以直接看 官方的文档</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/editor.html" target="_blank" rel="noopener">editor组件</a> </p><h3 id="自定义富文本组件"><a href="#自定义富文本组件" class="headerlink" title="自定义富文本组件"></a>自定义富文本组件</h3><p> 其实 还是比较简单的，editor组件文档里有示例代码，我们把示例带啊跑起来，就是一个富文本编辑框了：</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1568601815906.png" alt="1568601815906"></p><p>然后我们主要就新建一个组定义组件，把示例带啊复制过去，</p><p>把编辑框内容(html)，是否只读（read-only），placeholder（空提示）作为参数传入即可。</p><ul><li><p>read-only</p><p>ture 时即为渲染html模式，把编辑相关的隐藏即可。</p><p>false 即为编辑框，显示编辑框相关内容，大家自行控制即可</p></li></ul><p>需要 注意的是 在组件内获取editor wxml时要加<code>.in(this)</code>表示是组件内的wxml</p><pre><code class="html">wx.createSelectorQuery().in(this)        .select(&#39;#editor&#39;)        .context(function(res) {        })        .exec()</code></pre><p>剩下的都比较简单了，我直接贴代码,大家可以根据自己需求diy</p><pre><code class="javascript">  &lt;config&gt;{  &quot;component&quot;: true}&lt;/config&gt;&lt;template&gt;  &lt;view class=&quot;wrapper {{readOnly?'readOnly':''}}&quot;&gt;    &lt;view class=&quot;toolbar&quot; bindtap=&quot;format&quot; wx:if=&quot;{{!readOnly}}&quot;&gt;      &lt;i class=&quot;editicon icon-zitijiacu {{formats.bold ? 'ql-active' : ''}}&quot; data-name=&quot;bold&quot;&gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-zitixieti {{formats.italic ? 'ql-active' : ''}}&quot; data-name=&quot;italic&quot;&gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-zitixiahuaxian {{formats.underline ? 'ql-active' : ''}}&quot;        data-name=&quot;underline&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-zitishanchuxian {{formats.strike ? 'ql-active' : ''}}&quot;        data-name=&quot;strike&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-zuoduiqi {{formats.align === 'left' ? 'ql-active' : ''}}&quot;        data-name=&quot;align&quot;        data-value=&quot;left&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-juzhongduiqi {{formats.align === 'center' ? 'ql-active' : ''}}&quot;        data-name=&quot;align&quot;        data-value=&quot;center&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-youduiqi {{formats.align === 'right' ? 'ql-active' : ''}}&quot;        data-name=&quot;align&quot;        data-value=&quot;right&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-zuoyouduiqi {{formats.align === 'justify' ? 'ql-active' : ''}}&quot;        data-name=&quot;align&quot;        data-value=&quot;justify&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-line-height {{formats.lineHeight ? 'ql-active' : ''}}&quot;        data-name=&quot;lineHeight&quot;        data-value=&quot;2&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-Character-Spacing {{formats.letterSpacing ? 'ql-active' : ''}}&quot;        data-name=&quot;letterSpacing&quot;        data-value=&quot;2em&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-722bianjiqi_duanqianju {{formats.marginTop ? 'ql-active' : ''}}&quot;        data-name=&quot;marginTop&quot;        data-value=&quot;20px&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-723bianjiqi_duanhouju {{formats.micon-previewarginBottom ? 'ql-active' : ''}}&quot;        data-name=&quot;marginBottom&quot;        data-value=&quot;20px&quot;      &gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-clearedformat&quot; bindtap=&quot;removeFormat&quot;&gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-font {{formats.fontFamily ? 'ql-active' : ''}}&quot;        data-name=&quot;fontFamily&quot;        data-value=&quot;Pacifico&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-fontsize {{formats.fontSize === '24px' ? 'ql-active' : ''}}&quot;        data-name=&quot;fontSize&quot;        data-value=&quot;24px&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-text_color {{formats.color === '#0000ff' ? 'ql-active' : ''}}&quot;        data-name=&quot;color&quot;        data-value=&quot;#0000ff&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-fontbgcolor {{formats.backgroundColor === '#00ff00' ? 'ql-active' : ''}}&quot;        data-name=&quot;backgroundColor&quot;        data-value=&quot;#00ff00&quot;      &gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-date&quot; bindtap=&quot;insertDate&quot;&gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon--checklist&quot; data-name=&quot;list&quot; data-value=&quot;check&quot;&gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-youxupailie {{formats.list === 'ordered' ? 'ql-active' : ''}}&quot;        data-name=&quot;list&quot;        data-value=&quot;ordered&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-wuxupailie {{formats.list === 'bullet' ? 'ql-active' : ''}}&quot;        data-name=&quot;list&quot;        data-value=&quot;bullet&quot;      &gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-undo&quot; bindtap=&quot;undo&quot;&gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-redo&quot; bindtap=&quot;redo&quot;&gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-outdent&quot; data-name=&quot;indent&quot; data-value=&quot;-1&quot;&gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-indent&quot; data-name=&quot;indent&quot; data-value=&quot;+1&quot;&gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-fengexian&quot; bindtap=&quot;insertDivider&quot;&gt;&lt;/i&gt;      &lt;i class=&quot;editicon icon-charutupian&quot; bindtap=&quot;insertImage&quot;&gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-format-header-1 {{formats.header === 1 ? 'ql-active' : ''}}&quot;        data-name=&quot;header&quot;        data-value=&quot;{{1}}&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-zitixiabiao {{formats.script === 'sub' ? 'ql-active' : ''}}&quot;        data-name=&quot;script&quot;        data-value=&quot;sub&quot;      &gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-zitishangbiao {{formats.script === 'super' ? 'ql-active' : ''}}&quot;        data-name=&quot;script&quot;        data-value=&quot;super&quot;      &gt;&lt;/i&gt;      &lt;!-- &lt;i class=&quot;editicon icon-quanping&quot;&gt;&lt;/i&gt; --&gt;      &lt;i class=&quot;editicon icon-shanchu&quot; bindtap=&quot;clear&quot;&gt;&lt;/i&gt;      &lt;i        class=&quot;editicon icon-direction-rtl {{formats.direction === 'rtl' ? 'ql-active' : ''}}&quot;        data-name=&quot;direction&quot;        data-value=&quot;rtl&quot;      &gt;&lt;/i&gt;    &lt;/view&gt;    &lt;editor      id=&quot;editor&quot;      class=&quot;readOnly?&#39;readOnly-container&#39;:&#39;ql-container&#39;&quot;      placeholder=&quot;{{placeholder}}&quot;      showImgSize      showImgToolbar      showImgResize      bindstatuschange=&quot;onStatusChange&quot;      read-only=&quot;{{readOnly}}&quot;      bindready=&quot;onEditorReady&quot;    &gt;&lt;/editor&gt;    &lt;!-- &lt;view&gt;        &lt;button bindtap=&quot;readOnlyChange&quot;&gt;{{readOnly ? '可写':'只读'}}&lt;/button&gt;    &lt;/view&gt;--&gt;  &lt;/view&gt;&lt;/template&gt;&lt;script&gt;Component({  properties: {    readOnly: {      type: Boolean,      value: false    },      placeholder:{      type: String,      value: &#39;开始输入...&#39;    },    html:{      type: String,      value: &#39;&#39;    }  },  data: {    formats: {},    bottom: 0,    _focus: false,    editorCtx:&#39;&#39;  },  observers: {    &#39;html&#39;: function (html) {      // 在 numberA 或者 numberB 被设置时，执行这个函数      if(this.editorCtx){        this.editorCtx.setContents({        html: html      })      }    }  },  attached: function() {},  ready: function() {},  methods: {    onEditorReady() {      const that = this      wx.createSelectorQuery().in(this)        .select(&#39;#editor&#39;)        .context(function(res) {          that.editorCtx = res.context          that.editorCtx.setContents({            html: that.data.html          })        })        .exec()    },    undo() {      this.editorCtx.undo()    },    redo() {      this.editorCtx.redo()    },    format(e) {      let { name, value } = e.target.dataset      if (!name) return      // console.log(&#39;format&#39;, name, value)      this.editorCtx.format(name, value)    },    onStatusChange(e) {      const formats = e.detail      this.setData({ formats })    },    insertDivider() {      this.editorCtx.insertDivider({        success: function() {          console.log(&#39;insert divider success&#39;)        },      })    },    clear() {      this.editorCtx.clear({        success: function(res) {          console.log(&#39;clear success&#39;)        },      })    },    removeFormat() {      this.editorCtx.removeFormat()    },    insertDate() {      const date = new Date()      const formatDate = `${date.getFullYear()}/${date.getMonth() +        1}/${date.getDate()}`      this.editorCtx.insertText({        text: formatDate,      })    },    insertImage() {      const that = this      wx.chooseImage({        count: 1,        success: function() {          that.editorCtx.insertImage({            src:              &#39;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543767268337&amp;di=5a3bbfaeb30149b2afd33a3c7aaa4ead&amp;imgtype=0&amp;src=http%3A%2F%2Fimg02.tooopen.com%2Fimages%2F20151031%2Ftooopen_sy_147004931368.jpg&#39;,            data: {              id: &#39;abcd&#39;,              role: &#39;god&#39;,            },            success: function() {              console.log(&#39;insert image success&#39;)            },          })        },      })    },  },})&lt;/script&gt;&lt;style lang=&quot;scss&quot; src=&quot;./rich-text.scss&quot;&gt;&lt;/style&gt;</code></pre><p>大家赶紧把第三方的富文本组件换过来吧<del>~</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;小程序富文本问题&quot;&gt;&lt;a href=&quot;#小程序富文本问题&quot; class=&quot;headerlink&quot; title=&quot;小程序富文本问题&quot;&gt;&lt;/a&gt;小程序富文本问题&lt;/h3&gt;&lt;p&gt;因为小程序用的不是html标签，，所以市面上的富文本编辑器都不适用，自己改起来也麻烦，大多都
      
    
    </summary>
    
    
      <category term="wxapp" scheme="https://callmesoul.cn/categories/wxapp/"/>
    
    
  </entry>
  
  <entry>
    <title>产品经理使用git发布/部署Axure原型</title>
    <link href="https://callmesoul.cn/posts/45115/"/>
    <id>https://callmesoul.cn/posts/45115/</id>
    <published>2019-09-10T01:14:14.000Z</published>
    <updated>2019-12-09T08:04:45.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>工作了几年了，也和不少产品打过交道发现了和产品交流上的一些问题，就是axure原型分享。</p><p>产品做完原型就要发给老板，设计师，开发看，每人发一份。然后后面原型有修改或添加之类的，又要重新每人发一份，别人又要经常接受一份。</p><p>看似很正常的传统工作流程，但效率有点低，而且接受的人，接受了多个版本以后会经常弄混乱，没有整理的人还要每次去找产品经理发的 原型放在了哪里？哪个才是最新的版本。</p><p>下面就介绍下git来解决以上问题。</p><h3 id="Axure"><a href="#Axure" class="headerlink" title="Axure"></a>Axure</h3><p>axure是一原型开发工具，做产品都都应该很熟悉。</p><p>其实前言说到的问题，一些新的做原型产品其实很好解决了，例如墨刀之类的，做完只需要发个预览链接到群里就行了，然后每次更新了，预览的链接也会跟着更新。但墨刀是收费，而且功能也相对Axure有点限制，axure的生态更完善，比如UI框架都有开源自己的Axure组件，所以大多产品还是比较喜欢Axure做原型多。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>git 是一版本控制系统，一般用来管理开发代码居多，开发人员必会的了，产品经理可能少接触写。</p><p>windows 安装：<a href="https://www.cnblogs.com/wj-1314/p/7993819.html" target="_blank" rel="noopener">https://www.cnblogs.com/wj-1314/p/7993819.html</a></p><p>mac 安装：<a href="https://git-scm.com/book/zh/v2/起步-安装-Git" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git</a></p><p>安装完打开命令行初始化</p><p>windows : win键 + R键 –&gt; 输入<code>cmd</code> 回车 </p><pre><code>git config --global user.name &quot;你的名字&quot;git config --global user.email &quot;你的邮箱&quot;</code></pre><h3 id="Gitee-Github"><a href="#Gitee-Github" class="headerlink" title="Gitee,Github"></a>Gitee,Github</h3><p>可以理解为使用git的文件托管平台</p><p>这里推荐gitee，国内快。</p><p>网址：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></p><p>先去注册个账号，免费的放心。</p><h3 id="开始使用gitee-部署-axure项目-github等其他托管平台相似"><a href="#开始使用gitee-部署-axure项目-github等其他托管平台相似" class="headerlink" title="开始使用gitee 部署 axure项目 github等其他托管平台相似"></a>开始使用gitee 部署 axure项目 github等其他托管平台相似</h3><ol><li>登陆后创建个仓库</li></ol><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567589996040.png" alt="1567589996040"></p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567590260125.png" alt="1567590260125"></p><ol start="2"><li><p>创建一个<code>index.html</code>文件</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567591236721.png" alt="1567591236721"></p><p><img src="C:%5CUsers%5CBenz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567591334990.png" alt="1567591334990"></p></li><li><p>开始仓库pages服务</p></li></ol><p>   <img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567591427074.png" alt="1567591427074"></p><p>   <img src="C:%5CUsers%5CBenz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567591471259.png" alt="1567591471259"></p><p>   点启动</p><p>   <img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567591517421.png" alt="1567591517421"></p><p>   需要等一会时间</p><p>   <img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567591557067.png" alt="1567591557067"></p><p>   部署完后就可以访问下地址 <a href="https://callmesoul.gitee.io/" target="_blank" rel="noopener">https://你的用户名.gitee.io</a></p><p>   <img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567591916474.png" alt="1567591916474"></p><p>   其实就是我们刚创建的<code>index.html</code>内容</p><ol start="4"><li><p>把gitee项目拉下来</p><p>复制gitee项目地址</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567593069749.png" alt="1567593069749"></p></li></ol><p>   打开你要放置项目的目录右键，右键打开命令行</p><p>   windows用户可以右键选择<code>Git Bash here</code></p><p>   输入 <code>git clone 刚复制的项目地址</code></p><p>   <img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567593148050.png" alt="1567593148050"></p><p>   完成后就会多个你的项目名的文件夹</p><ol start="5"><li><p>设置 Axure 项目导出 到本地的 gitee 项目文件夹地址</p><p>打来Axure, 选择 <code>发布</code> -&gt; <code>生成html</code></p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567644410702.png" alt="1567644410702"></p><p>然后输出目标文件夹我们就选刚创建的gitte本地文件夹，然后考虑我我们后面会有多个项目，于是乎我们就在里面新建一个文件夹去当前项目，下次有新项目了就只需在里面再创建个心文件夹放就可以了</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567644652834.png" alt="1567644652834"></p><p>弄完此时就可以看到可以访问打方才输出的html axure原型了</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567644792908.png" alt="1567644792908"></p></li></ol><p>   但此时只是本地或局域网可以问题，你发给别人，别人看不到的。</p><p>   而且要一直开着机。</p><p>   下面我们就要把gitee本地文件夹中里面我们刚才新加的内容同步上gitee仓库里，这样就可以通过上面的域名访问了。</p><ol start="6"><li><p>把本地的gitee文件夹同步到gittee仓库</p><p>回到本地gitee文件夹的命令行</p><p>输入</p><pre><code>git add *</code></pre><p>意思就是添加所有文件</p><p>再输入</p><pre><code>git commit -m 备注信息 </code></pre><p>就是提交修改的意思 ，后面的备注信息是备注你每次提交修改了什么内容一个提示（自定义）</p><p>最后输入</p><pre><code>git push</code></pre><p>意思就是推送到线上对应仓库，</p><p>第一次推送时会需要填写gitee的账号密码，因为要知道那你仓库是属于你的才可以推送，不然每个人都可以往你仓库推送那就麻烦了。</p><p><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567645656523.png" alt="1567645656523"></p></li></ol><p>   然后回到gittee仓库的pages服务页面更新下就可以访问了</p><p>   然后就可以试下访问线上的域名了。</p><p>   <img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567646417382.png" alt="1567646417382"></p><p>   还记得域名么？</p><p>   <code>https://你的用户名.gitee.io/</code></p><p>   你直接访问这个是没变的，因为我们的文件放在了一个目录下了。所有要加上目录名，然后Axure的导航页是<code>start.html</code></p><p>   于是你要访问的域名就是</p><p>   <code>https://你的用户名.gitee.io/项目文件夹名/start.html</code></p><p>   <img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/1567646603270.png" alt="1567646603270"></p><p>   最后大功告成，可以把url发给各位老板，开发者，设计师了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;工作了几年了，也和不少产品打过交道发现了和产品交流上的一些问题，就是axure原型分享。&lt;/p&gt;
&lt;p&gt;产品做完原型就要发给老板，设计师，开
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序开发-PC网页端扫小程序码登陆解决方案</title>
    <link href="https://callmesoul.cn/posts/22147/"/>
    <id>https://callmesoul.cn/posts/22147/</id>
    <published>2019-09-10T01:13:14.000Z</published>
    <updated>2019-12-09T08:04:45.372Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个小程序<code>我爱阅读</code>,是一款针对小学生阅读习惯培养的一个小程序工具，有兴趣的可以了解下。</p><p>小程序在学校反映不错，于是有了老师提出需要PC网页端的需求。因为老师平时办公一般在电脑上，在电脑上给学生布置阅读作业，会更方便得多，而移动小程序端对于老师来说更像一个辅助工具，平时用不到电脑时可以通过小程序操作。而且学生的阅读数据再网页展示也方便老师在课堂上给学生投影展示。</p><p>于是乎就有了网页端的需求。</p><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>这是要做网页端最开始要解决的问题。</p><p>一开始有一下解决方案</p><ol><li>初始化账号密码，网页通过账号密码登陆</li><li>微信开发平台，公众号和小程序绑定，通过公众平台的网页二维码授权登陆。</li></ol><p>但以上两种方法都不能很好地解决需求：</p><ul><li>第一种，初始化账号密码，秘密好办可以统一初始密码，但用什么作为账号呢？微信用户名，openid不可能，用户手机又不是全都用。就算解决了初始化账号密码问题，安全度也不高。</li><li>第二种，有个缺陷就是用户必须关注了绑定的公众号后再进入小程序，才可以实现。我们现在主打的是小程序，公众号只是运行的一个中间平台。而且很多新用户是通过小程序分享的链接进入，完全没法先去关注公众号。所以这种方法也不适合。</li></ul><h3 id="转转游戏"><a href="#转转游戏" class="headerlink" title="转转游戏"></a>转转游戏</h3><p>以上两种方法行不通，于是网上找各种方法。最终找到了<a href="http://game.zhuanzhuan.com/" target="_blank" rel="noopener">转转游戏</a>，就是通过扫描小程序码登陆的，体验了一下，大概也了解了方法。</p><h3 id="扫小程序码登陆逻辑"><a href="#扫小程序码登陆逻辑" class="headerlink" title="扫小程序码登陆逻辑"></a>扫小程序码登陆逻辑</h3><ol><li>首先在小程序添加一个网页登陆的页面，页面接收一个登陆id（loginId）</li><li>网页端展示小程序网页登陆页的小程序码，附带登陆id（loginId）</li><li>用户通过扫描网页上的小程序码，手机微信进入相应小程序的网页登陆页，设置确认登陆和取消登陆按钮，同时网页端扫面后应开启socket或者定时去请求后台，当前登陆id(loginId)的使用状态。<ul><li>如果loginId使用后且确认登陆，应一起返回用户的token，网页就可以使用该token去当前单用户去请求接口了</li><li>如果用户取消登陆或超时则网页提示相应信息，且重新获取新的小程序码。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这样可以完美地使用小程序当前用户信息去登陆网页端，用户不用输入账号密码，也不用计账号密码，直接用微信扫一扫就可以登陆，真实方便简洁。完美~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做了一个小程序&lt;code&gt;我爱阅读&lt;/code&gt;,是一款针对小学生阅读习惯培养的一个小程序工具，有兴趣的可以了解下。&lt;/p&gt;
&lt;p&gt;小程序在学校反映不错，于是有了老师提出需要PC网页端的需求。因为老师平时办公一般在电脑上，在电脑上给学生布置阅读作业，会更方便得多，而移动
      
    
    </summary>
    
    
      <category term="wxapp" scheme="https://callmesoul.cn/categories/wxapp/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序静态资源无缝转移到腾讯云COS 使用wepy mpvue 等webpack打包的小程序项目</title>
    <link href="https://callmesoul.cn/posts/36621/"/>
    <id>https://callmesoul.cn/posts/36621/</id>
    <published>2019-02-10T01:13:14.000Z</published>
    <updated>2019-12-09T08:04:45.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天介绍的工具是wecos"><a href="#今天介绍的工具是wecos" class="headerlink" title="今天介绍的工具是wecos"></a>今天介绍的工具是<a href="https://github.com/tencentyun/wecos" target="_blank" rel="noopener">wecos</a></h3><ul><li><h2 id="原生小程序"><a href="#原生小程序" class="headerlink" title="原生小程序"></a>原生小程序</h2></li></ul><p>原生的小程序直接根据wecos的文章操作即可，wecos提供了上传本地资源文件到cos、替换小程序的引用本地路径为上传路径等。</p><p>这里不作详细说明，主要介绍webpack打包的小程序项目。</p><p>因为原生写起来很不方便。</p><ul><li><h2 id="webpack小程序打包项目"><a href="#webpack小程序打包项目" class="headerlink" title="webpack小程序打包项目"></a>webpack小程序打包项目</h2><p>最好是开发完再来进行这一步，前期专心开发。</p><p>我前期开发时，引用静态资源用的是相对路径，用的绝对路径应该也可以的。</p><p>项目开发完后</p><ol><li><p>webpack设置打包后的cdn地址, webpack rules选项：</p><pre><code class="javascript">{        test: /\.(png|jpg|jpeg|gif|svg)$/,        use: {          loader: &#39;file-loader&#39;,          options: {            name: &#39;/[path][name].[ext]&#39;,            publicPath: function (file) {              if(isProduction){//判断是否生产环境，自己判断咯。                if(file.indexOf(&#39;tabbar&#39;)&gt;=0){//如果有tabbar的，tabbar用一个tabbar的文件夹装起来，因为tabbar图片只支持本地。                  return file;                }                else{                  return &#39;https://xxx-1234567.cos.ap-guangzhou.myqcloud.com/&#39;+file;//你的腾讯云cos bucket的域名。                }              }else{                return file;              }            }          }        },      },</code></pre></li><li><p>安装<code>wecos</code></p><p><code>npm install -g wecos</code></p></li><li><p>跟目录创建<code>wecos.config.json</code>文件</p></li><li><p>填写<code>wecos.config.json</code> 配置</p><pre><code class="javascript">{  &quot;appDir&quot;: &quot;./dist/assets&quot;,  &quot;cos&quot;: {    &quot;secret_id&quot;: &quot;xxxxx&quot;,    &quot;secret_key&quot;: &quot;xxxxx&quot;,    &quot;bucket&quot;: &quot;xxx-1234567&quot;,//bucker-appid    &quot;region&quot;: &quot;ap-guangzhou&quot;, //创建 bucket 时选择的地域简称    &quot;folder&quot;: &quot;/assets&quot; //资源存放在 bucket 的哪个目录下  },  &quot;uploadFileSuffix&quot;: [&quot;.jpg&quot;,&quot;.png&quot;,&quot;.gif&quot;,&quot;.webp&quot;,&quot;.svg&quot;],  &quot;uploadFileBlackList&quot;: [//不上传的图片，填tabbar的目录    &quot;./dist/assets/images/tabbar&quot;,  ]}</code></pre></li><li><p>在根目录运行<code>wecos</code>即可。</p></li></ol></li></ul><ul><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li><p>为什么不用<code>webpack</code>的 <code>publicPath</code> 而用<code>file-loader</code>的<code>publicPath</code> ？</p><p>因为<code>webpack</code>的 <code>publicPath</code>只支持字符串，一但改成线上域名，所有静态资源的前缀都会变成cdn域名。而小城的tabbar并不支持网络图片，base64也不支持，只支持本地图片。</p><p>这时我们就用<code>file-loader</code>的<code>publicPath</code> ，支持函数且返回文件名，可以写条件去过滤掉tabbar的文件。</p><p>使tabbar文件使用本地的，而其他使用线上cdn域名的文件。</p></li><li><p>为什么要用<code>wecos</code>？</p><p>当然你也可以不用自己，本地打包后自己手动上传到cos后台。</p><p>然后删除了本地的图片文件（除了tabbar的图片）。</p><p>然后开发者工具再上传代码。</p><p>你会发现这步骤很累赘。</p><p>使用<code>wecos</code>后，我们打包后只需要跑一下<code>cos</code>就可以自动上传本地的上cdn，且自动删除本地的（tabbar图片除外）。</p><p>是不是方便多了？</p><p>赶紧在你项目用上把！</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天介绍的工具是wecos&quot;&gt;&lt;a href=&quot;#今天介绍的工具是wecos&quot; class=&quot;headerlink&quot; title=&quot;今天介绍的工具是wecos&quot;&gt;&lt;/a&gt;今天介绍的工具是&lt;a href=&quot;https://github.com/tencentyun/
      
    
    </summary>
    
    
      <category term="wxapp" scheme="https://callmesoul.cn/categories/wxapp/"/>
    
    
  </entry>
  
  <entry>
    <title>石墨文档 Vs 腾讯文档</title>
    <link href="https://callmesoul.cn/posts/4649/"/>
    <id>https://callmesoul.cn/posts/4649/</id>
    <published>2018-09-10T01:14:14.000Z</published>
    <updated>2019-12-09T08:04:45.371Z</updated>
    
    <content type="html"><![CDATA[<p>最近腾讯大力再推一个新产品—腾讯文档。</p><p>朋友圈也纷纷转发感觉是一个不错的产品。</p><p>但其实早在四年前左右吧，大概忘记了，就有了石墨文档了。</p><p>没用过石墨文档的，直接用腾讯文档可能觉得腾讯文档很6，下面就来对比两款产品。</p><h3 id="大家都主打的功能"><a href="#大家都主打的功能" class="headerlink" title="大家都主打的功能"></a>大家都主打的功能</h3><ol><li><p>在线文档</p><p>在线编辑，word，excel文档。即时保存，不用手动保存，即使电脑死机奔溃，记录都在。大家应该都试过谢了一篇很长的文章就突然死机等原因就需要重写了吧。在这两款产品都可以很好的解决这问题。</p></li><li><p>多人协助</p><p>这也是我最开始用石墨文档的原因。我是做开发，经常有一些开发需求，或bug需要修复。产品就会把需要做的东西用word文档列好发给我。</p><p>然后我做着做着发现有一些问题出现</p><p>· 不是我的问题  —我发文档给源问题人。</p><p>· 多人同时处理   —-需要分工，然后把问题的文档也得发他一份。</p><p>· 做完要给回人复验 — 又要把文档发给别人，因为我再文档做了标注哪些问题之类的。</p><p>· 最重要的是进度没有一个全局的把控。 — 一份文档多人再分工。进度需要查看多人的文档处理的和</p><p>· 等等等~~  项目大，人越多就会有越多的问题出题在沟通成本上。</p></li></ol><p>但用了这两个产品后。多人同时编辑一个文档，有新的内容需求，直接加，所有都可以看到。不用再另外再给没人发一份新添加的需求文档这样。</p><p>用石墨文档首页的介绍，很好地介绍了多人协作文档的强大！</p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/bCE9Lf3DIf.gif" alt="mark"></p><p>这里的动画是gif比较不顺畅。可以看石墨官网的原展示介绍(<a href="https://shimo.im/)[https://shimo.im/]" target="_blank" rel="noopener">https://shimo.im/)[https://shimo.im/]</a></p><h3 id="界面对比"><a href="#界面对比" class="headerlink" title="界面对比"></a>界面对比</h3><p>没用石墨文档的人可能没感觉，但用过石墨文档的人在用腾讯文档。就会感觉的怎么就一个翻本石墨文档呢？可能我想多了吧。但企鹅的抄袭却是不是盖的。</p><h4 id="腾讯文档word界面"><a href="#腾讯文档word界面" class="headerlink" title="腾讯文档word界面"></a>腾讯文档word界面</h4><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/gBhhDL0g2G.png?imageslim" alt="mark"></p><h4 id="石墨文档word界面"><a href="#石墨文档word界面" class="headerlink" title="石墨文档word界面"></a>石墨文档word界面</h4><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/6HAbhKl34H.png?imageslim" alt="mark"></p><h4 id="石墨word-vs-腾讯word"><a href="#石墨word-vs-腾讯word" class="headerlink" title="石墨word vs 腾讯word"></a>石墨word vs 腾讯word</h4><p>可以看书界面布局几乎差不多，但是可以看出石墨的设计更细致写，有一种沉浸式写作的感觉，毕竟上线一段时间了，有一定的优化。相对腾讯刚上线，页面相对比粗糙简单。</p><p>可看到功能基本差不多</p><p>腾讯文档word多了 水印和翻译功能。 试了下翻译功能好像挺不错。</p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/eGIG8Ke4ll.png?imageslim" alt="mark"></p><p>而石墨文档word功能会多了一个特殊格式的片段，如代码片段，引用片段等。不同的内容有不同的段落样式，可读性会高很多。</p><p>markdown功能是两个文档的缺陷。两个产品都支持一些很简单的写法不能很好的兼容markdown。</p><p>还有以下几点：</p><ol><li><p>石墨文档有修改记录，也有手动保存的版本记录两种。而腾讯只有修改记录。</p></li><li><p>石墨文档多个评论的功能。使文档变得可交互交流。</p></li><li><p>石墨文档的每个小功能都有一个简单的视频操作介绍，点右下角的问号可找到</p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/98Lh06kdl5.png?imageslim" alt="mark"></p></li><li><p>石墨文档支持快捷键，也有快捷列表可以看，同样右下角问号</p></li></ol><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/B92LeHFl7j.png?imageslim" alt="mark"></p><ol start="5"><li>多人协助的文档，石墨可看到每一个部分的的编写者，这个还是很强大的。</li><li>石墨贴心的的免打扰，不过网页的消息一般会比较少。</li></ol><h3 id="石墨-excel-Vs-腾讯excel"><a href="#石墨-excel-Vs-腾讯excel" class="headerlink" title="石墨 excel Vs  腾讯excel"></a>石墨 excel Vs  腾讯excel</h3><p>和word文档对比差不多。</p><p>布局风格，功能都差不多。</p><p>石墨多了些高级点的功能如：根据表格信息生产图表。也可以创建表单收集信息等。</p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/kCb4G01Daa.png?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180424/JLi60Bb7CL.png?imageslim" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上可以出，石墨是个很用心的产品，无论从设计还是功能的研发还是一些交互。而且石墨也有了一段时间的沉淀优化，所以石墨总体还是比腾讯文档更细致一些。感觉腾讯文档就如早其版本的石墨吧。</p><p>但是后面也难说，腾讯有这么大的流量各种优势，后面会变怎样很难说。替石墨抓鸡了…</p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>有现场的比较完善的石墨文档腾讯为何还要自研发一款呢？</p><p>其实原因的显而易见的。QQ脱离了日常沟通，变成了工作交流的主流功能，每天不知道都有多少工作文件在qq传来传去。</p><p>再从qq到TIM的转变都可以看出qq在日常娱乐社交工具慢慢转向一个专注工作交流的工具。</p><p>而在线文档这么核心的功能是不太可能接入第三家的，第一费用大。长期的这么多分享。第二资源外泄。</p><p>其实我会更看好腾讯收购石墨文档，然后用石墨文档。这样就双赢了。</p><p>以上只针对web端的简单评测。</p><p>##你还在用word，excel？？？欧特曼啦！！</p><p>##快来用用在线文档吧。</p><p>*不过一些非常私隐性，安全要求比较高的文档还是线下吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近腾讯大力再推一个新产品—腾讯文档。&lt;/p&gt;
&lt;p&gt;朋友圈也纷纷转发感觉是一个不错的产品。&lt;/p&gt;
&lt;p&gt;但其实早在四年前左右吧，大概忘记了，就有了石墨文档了。&lt;/p&gt;
&lt;p&gt;没用过石墨文档的，直接用腾讯文档可能觉得腾讯文档很6，下面就来对比两款产品。&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>歧江吹风随便拍拍</title>
    <link href="https://callmesoul.cn/posts/41651/"/>
    <id>https://callmesoul.cn/posts/41651/</id>
    <published>2018-09-10T01:13:14.000Z</published>
    <updated>2019-12-09T08:04:45.363Z</updated>
    
    <content type="html"><![CDATA[<ul><li>拍照时间：2018-04-04</li><li>拍照设备手机（坚果Pro2）</li><li>地点在歧江河边的末端，较兴中更安静，人会少点，没有市区人多的吵杂，更清静。</li></ul><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/3a4Af8lL9m.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/KCE7mhLIi5.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/GiHABalGaH.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/if7aKh21h9.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/aeci1e8F6c.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/50kb333105.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/LDEgJAmeKa.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/2g9fm1gb9F.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/3fH3KIJaj1.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/9HcI9hmKc1.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/mkBkdLeLbK.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/G1hmKEJkBD.jpg?imageslim" alt="mark"><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/I2Ig73lAhd.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/IaFim2GHE8.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/BmjGD53e3c.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/22li1gkmKI.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/H64lf06aK5.jpg?imageslim" alt="mark"></p><p><img src="http://oyz3pjs26.bkt.clouddn.com/blog/180408/5cDeiA382A.jpg?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;拍照时间：2018-04-04&lt;/li&gt;
&lt;li&gt;拍照设备手机（坚果Pro2）&lt;/li&gt;
&lt;li&gt;地点在歧江河边的末端，较兴中更安静，人会少点，没有市区人多的吵杂，更清静。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://oyz3pjs26.bkt
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用**gitalk** 代替其他第三方评论插件</title>
    <link href="https://callmesoul.cn/posts/47402/"/>
    <id>https://callmesoul.cn/posts/47402/</id>
    <published>2018-06-10T01:14:14.000Z</published>
    <updated>2019-12-09T08:04:45.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第三方评论插件已经死得差不多了，从一开始多说到后来的网易云跟帖，最后剩下了畅言。最近畅言为了活下去，也退出了广告，让用户体验更差了。本来用户体验就不咋地。可惜碍于找不到其他更好的代替者就只好将就一下了。</p><p>知道今天找到gitalk，坚定不移地把畅言给换了。</p><h3 id="关于gitalk"><a href="#关于gitalk" class="headerlink" title="关于gitalk"></a>关于gitalk</h3><p>Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。 </p><ul><li>使用 GitHub 登录</li><li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 （cmd|ctrl + enter）</li></ul><p><a href="https://github.com/gitalk/gitalk/blob/master/readme.md" target="_blank" rel="noopener">Readme</a> <a href="https://gitalk.github.io/" target="_blank" rel="noopener">在线示例</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>在需要插入评论的地方给个占位<code>&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</code></p></li><li><p>接着在占位下方引入插件</p><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>也可以js文件和css文件下载下来自己引入</p></li><li><p>创建 <strong>GitHub Application</strong>，如果没有 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里申请</a> </p><ul><li><img src="https://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/TIM%E6%88%AA%E5%9B%BE20180713151231.png" alt="avatar"></li></ul></li><li><p>在自己的GitHub账号创建一个库来放评论，库名称填上一步的应用名称</p></li><li><p>在博客的引用插件下方填写配置</p><pre><code class="javascript">var gitalk = new Gitalk({                clientID: &#39;9f89xxxxxxde0f46&#39;, ///步骤3创建后得到的                clientSecret: &#39;22fc21a22xxxxxxf599fd41746ff54f&#39;,///步骤3创建后得到的                repo: &#39;myblog_comment&#39;,///步骤4创建的库名                owner: &#39;callmesoul&#39;,//自己的GitHub用户名                admin: [&#39;callmesoul&#39;],//自己的GitHub用户名                id: &#39;{{id}}&#39;, // 唯一标示，一般是文章id也可以是文章url                distractionFreeMode: false  // Facebook-like distraction free mode            })            gitalk.render(&#39;gitalk-container&#39;)</code></pre></li><li><p>以上完成后就可以上传上自己的博客了。</p><p>上传完，第一次进入相应页面会出现一个初始化提示。</p><p>根据操作登录自己的GitHub授权就可以了。</p></li></ol><p>值得一说的就一有评论就相当于项目有issue，gitthub就自动会有邮件提示。</p><p>比畅言好多了，畅言你不登录它后台看都不知道有新的评论。</p><p>以上就完成了，有什么问题不懂得可以在评论处提问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;第三方评论插件已经死得差不多了，从一开始多说到后来的网易云跟帖，最后剩下了畅言。最近畅言为了活下去，也退出了广告，让用户体验更差了。本来用户
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>装机日志</title>
    <link href="https://callmesoul.cn/posts/30696/"/>
    <id>https://callmesoul.cn/posts/30696/</id>
    <published>2018-05-10T01:14:14.000Z</published>
    <updated>2019-12-09T08:04:45.364Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3></li></ul><p>​     只从从家里搬出来后，自己带着台小mac air。因为太小了，用惯了台式。这段是时间每天下班都很少开电脑，也就少做事了。</p><p>最近有空想着不能这么闲下去，于是就像买回台台式回来干些事。</p><p>首先自己逛了下组装机市场，感觉低端市场，较少了。好多品牌都主打高端组装机，水冷之类，动不动上万。个人虽也玩玩游戏，但也不是什么游戏骨灰级或发烧级玩家，一般配置也就玩得起我玩得游戏了。没必要那么高。而做稍微低端点市场的品牌都较杂，质量难保证。尤其淘宝，你可以搜下组装电脑，有些一整套才两千多，但跟着他的配置自己去京东捡，远超两千多好不。哪有那么好的事的，硬件的来源渠道和质量可想而知。而且个人对审美较高要求啊，想自己组装个小机箱，不想那么大，占位置，所有最后还是确定自己组装咯。</p><ul><li><h3 id="预算"><a href="#预算" class="headerlink" title="预算"></a>预算</h3><p>价格：4000左右</p><p>作用：玩玩lol啊，吃吃鸡啊（虽然我不吃鸡），开发，ps简单设计等。算是正常的娱乐+工作级别的机器吧。</p></li></ul><ul><li><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>机箱：<a href="https://item.jd.com/1228541.html" target="_blank" rel="noopener">乔思伯（JONSBO）UMX1-PLUS侧透版本 银色 MINI-ITX机箱（支持ITX主板/全铝外</a>（这机箱合适我这种，没多少预算又追求颜值的，价格刚刚好，能接受，颜值算同价格数一数二了。没颜值追求的可以在机箱省些钱。而且买普通大机箱，其他硬件随便挑）</li><li>主板：<a href="https://item.jd.com/6972980.html" target="_blank" rel="noopener">华擎（ASRock）H310M-ITX/ac主板（Intel H310/LGA 1151）</a>（如果选了小机箱，选主板一定要注意，只能选ITX小主板，不然就装不了翻车了。）</li><li>CPU：<a href="https://item.jd.com/17208743492.html" target="_blank" rel="noopener">英特尔（Intel） 酷睿i3 8100/8350K CPU八代 台式机电脑处理器盒装 板U套装 中文盒装 </a>（为了最求稳定，稳定至上，最后还是选了I系列，为什么选i3，不选i5，i7。有钱我能不选？）</li><li>内存：<a href="https://item.jd.com/2121097.html" target="_blank" rel="noopener">金士顿(Kingston)骇客神条 Fury系列 DDR4 2400 8G 台式机内存</a>*2（开发都是知道了，内存必须16g起步，不然很烦心的，开个PS，开个webStrom，开个chrome都去了不少了。）</li><li>固态硬盘：<a href="https://item.jd.com/4311178.html" target="_blank" rel="noopener">金士顿(Kingston)A400系列 240G SATA3 固态硬盘</a>（这年头没固态不行啊，120能装个系统和一些其他东西，但是我的一些开发工具啊，工作相关的工具都想放在固态上，保证速度，于是乎选个240，应该差不多了。）</li><li>机械硬盘：<a href="https://item.jd.com/3356012.html" target="_blank" rel="noopener">希捷(SEAGATE)酷鱼系列 2TB 7200转64M SATA3 台式机机械硬盘(ST2000DM006)</a>（建议1Tb起步啦，2Tb应该一般用户都足够用，不用愁了。而且机械硬盘便宜到烂了现在。）</li><li>电源：<a href="https://item.jd.com/840370.html" target="_blank" rel="noopener">安钛克(Antec)VP500台式机电脑主机机箱电源500W（40万好评VP系列/台系电容/静音风</a>（小机箱对电源的大小也有要求，要看好咯。这电源好评多，品牌也行，也就这个。）</li><li>键盘：<a href="https://item.jd.com/5028795.html" target="_blank" rel="noopener">雷柏（Rapoo） V500PRO 104键混光机械键盘 游戏键盘 吃鸡键盘 背光键盘 电脑键盘</a>（较便宜的机械键盘了，有的话可以买更好的。不过也够用了。）</li><li>鼠标：<a href="https://item.jd.com/3654535.html" target="_blank" rel="noopener">华擎（ASRock）ASR-M01 幻影之舞 光电游戏鼠标 电竞鼠标</a>（这是是买华擎主板送的，还不错）</li><li>散热器：<a href="https://item.jd.com/6054136.html" target="_blank" rel="noopener">乔思伯（JONSBO）CR-701七彩流光版 CPU散热器 （多平台/5热管/下吹CPU散热器/12CM</a>（买这个主要为了颜值啊，加点氛围，不然的话完全不用买，cpu自带散热风扇的了。一开始买回来只为了颜值，买回来后发现，乔思伯真的很不错，颜值做工用料设计都很用心很有保证，说是追求完美的厂家一点不过分，以后买东西乔思伯有的都可以考虑买乔思伯的。）</li><li>显卡：显卡一开始没买的。因为集显先可以先用着，前期还是开发为主，后面买了条影驰的GTX 760 发现不兼容 win10 因为760最高支持dix11，而win10的dix是 12；后面换了条<a href="https://item.jd.com/3977224.html" target="_blank" rel="noopener">微星（MSI）GeForce GTX 1050 Ti GAMING X 4G 1290-1493MHZ 128BIT GDDR5 PCI-E </a></li></ul></li></ul><p>用760显卡的话总费用是4500左右，算在预算中，后面不兼容换了1050就5000多点，超了点，也还行。个人感觉整体配置旗鼓相当，都是统一等级的硬件，不会说那个硬件买贵了，浪费看了，用不了这么高。但要说唯一的话那就是显卡吧，但是显卡可以长期用，以后升级其他都不用升级显卡。</p><p>有什么好建议，也可以留言，给其他人一些参考。</p><ul><li><h3 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h3><p>京东就是快啊，全部京东送货，隔天就全到了，服务赞赞赞！下面就开始紧张的装机咯！</p><ul><li><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_185109R.jpg" alt="avatar"></li></ul></li></ul><ol><li><p>拆机箱</p><p>机箱做工设计都完美</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_185504R.jpg" alt="avatar"></p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_185516R.jpg" alt=""></p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_185529R.jpg" alt=""></p></li></ol><ol start="2"><li><p>装电源</p><p>500w大电源，不怕不够啦。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_190553R.jpg" alt=""></p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_192354R.jpg" alt=""></p></li></ol><ol start="3"><li><p>拆主版</p><p>主版还行，小身板，麻雀虽小五脏俱全啊。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_192930R.jpg" alt=""></p></li></ol><ol start="4"><li><p>拆CPU</p><p>八代I3，基本够用也稳定。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_192939R.jpg" alt=""></p></li></ol><ol start="5"><li><p>把cpu装主版上</p><p>这部最好小心点，毕竟cpu你懂的~</p><p>那封盖是要拿掉的哦。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_193505R.jpg" alt=""></p></li></ol><ol start="6"><li><p>装Cpu风扇</p><p>自带的风扇没有，用了乔思伯的风扇，做工设计颜值都一流。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_194019R.jpg" alt=""></p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_203606R.jpg" alt=""></p></li></ol><ol start="7"><li><p>把装好Cpu和风扇的主版装进机箱</p><p>装好主版就连机箱线，电源线等，不懂的百度可以找到教程，跟着教程走没什么难度。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_205834R.jpg" alt=""></p><p>原来这主版自带无限网卡，自带两天线，赞！</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181016_205828R.jpg" alt=""></p></li></ol><ol start="8"><li><p>连好机箱线跟电源线就可以开机了，这里用的是主版的集显。开机试试</p><p>注意的是有些主版cpu要独立供电，我这款就是。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181017_203914R.jpg" alt=""></p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181017_203921R.jpg" alt=""></p><p>能进到主版的bios就证明成功了。</p></li></ol><ol start="9"><li><p>成功，就可以把剩下的机械和固态硬盘装上去了</p><p>机械不用说了，有了固定座。固态硬盘是有些水绵圈，装上后再卡位向下推卡进去的，挺不错的设计。</p><p>显卡最后装，因为比较大。</p><p>装完就可以开机装系统了。</p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181023_191519R.jpg" alt=""></p><p><img src="http://callmesoul-blog.oss-cn-shenzhen.aliyuncs.com/IMG_20181023_191910R.jpg" alt=""></p></li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>好了，装机到此结束了。好久没装机了。一开始卡在了cpu独立供电哪里。因为之前的都是主版供电给Cpu的啊，坑。折腾了很久，主版通电，风扇也转，就是进不去主版的bois。后来发现cpu附近有6口的电源位，后来插上就行了。</p><p>感觉自己组装会更适合自己，配置啊，机箱啊颜值啊。也实惠。也可以增强自己的动手能力。好了，大家也去装机把。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​     只从从家里搬出来后，自己带着台小mac air。因为太小了，用惯了台式。这段是时间每天
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序开发-路由拦截设计</title>
    <link href="https://callmesoul.cn/posts/38984/"/>
    <id>https://callmesoul.cn/posts/38984/</id>
    <published>2017-10-10T01:14:14.000Z</published>
    <updated>2019-12-09T08:04:45.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先说下小程序的简单运行："><a href="#首先说下小程序的简单运行：" class="headerlink" title="首先说下小程序的简单运行："></a>首先说下小程序的简单运行：</h3><p>1.app onLaunch</p><p>2.如果有app onLaunch 的 path参数有值则跳到 path对应页面否则为app的json第一个路由</p><h4 id="onLaunch-的path怎么来的？"><a href="#onLaunch-的path怎么来的？" class="headerlink" title="onLaunch 的path怎么来的？"></a>onLaunch 的path怎么来的？</h4><p>1.通过分享给朋友的接口传的path</p><p>暂时只发现这个</p><h3 id="app-onLaunch-里拦截路由？"><a href="#app-onLaunch-里拦截路由？" class="headerlink" title="app onLaunch 里拦截路由？"></a>app onLaunch 里拦截路由？</h3><p>以后可得知小程序统一入口就是app的onLaunch，所以在onLaunch 拦截是最理想的。但是onLaunch里并没有提供拦截的接口或方法，当你在onLaunch有异步处理时，还没处理完，onLaunch就直接跳到了下一个页面了。</p><p>例如：你想获得用户信息在进入页面。</p><p>你在app onLaunch去请求用户信息，但onLaunch不会等你请求完再跳到页面。</p><p>所以在app没办法实现。</p><h3 id="app-json第一个路由里拦截！！！"><a href="#app-json第一个路由里拦截！！！" class="headerlink" title="app.json第一个路由里拦截！！！"></a>app.json第一个路由里拦截！！！</h3><p>既然app里面实现不了只能退居求次在第一个页面处理了，因为当没有path（onLaunch(option)）也就是正常打开小程序都会进入第一个页面，我们可以在第一个页面统一处理好逻辑再选择去跳其他页面。</p><h3 id="分享的页面带path会直接跳到path页面不跳到第一个页面？"><a href="#分享的页面带path会直接跳到path页面不跳到第一个页面？" class="headerlink" title="分享的页面带path会直接跳到path页面不跳到第一个页面？"></a>分享的页面带path会直接跳到path页面不跳到第一个页面？</h3><p>其实很简单分享的时候分享页面的path填写第一个页面路由例如/pages/login,在把你当前页面的路由作为一个参数一起传过去：</p><pre><code>onShareAppMessage(res) {      let fromPath=&#39;/pages/activity&#39;      return {        title: &#39;xxxxx！&#39;,        path: &#39;/pages/login?fromPath=&#39;+fromPath,        imageUrl:xxxxx,        success: (res) =&gt; {          xxxxxx        }      }    }</code></pre><p>这样分享出去的页面就会跳到一个页面而且是带你分享的页面路径作为参数的。</p><p>在第一个页面获得分享的路径做跳转就好，还可以加些逻辑之类方便多。</p><p>上面的写法有个问题，如果分享的页面也要参数，分享的path就会有两个??</p><pre><code class="/">/pages/login?fromPath=/pages/activity?activityId=1</code></pre><p>如果这样直接传过去第一个页面，activityId会被拦截掉，所以我们需要一个把问号转码的函数转码了再传过去，第一个页面获得页面后解码再跳转即可:</p><pre><code>onShareAppMessage(res) {      let fromPath=&#39;/pages/activity?activityId=2&#39;      fromPath=encodeURIComponent(fromPath);      return {        title: xxxxxx！&#39;,        path: &#39;/pages/login?fromPath=&#39;+fromPath,        imageUrl:xxxx,        success: (res) =&gt; {          xxxx        }      }    }</code></pre><p>然后在第一个页面使用对应函数解码即可：</p><pre><code>onLoad(params){    if(params.fromPath){            let fromPath=decodeURIComponent(params.fromPath);            ///do somethings...   }}</code></pre><p>大概流程就这样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;首先说下小程序的简单运行：&quot;&gt;&lt;a href=&quot;#首先说下小程序的简单运行：&quot; class=&quot;headerlink&quot; title=&quot;首先说下小程序的简单运行：&quot;&gt;&lt;/a&gt;首先说下小程序的简单运行：&lt;/h3&gt;&lt;p&gt;1.app onLaunch&lt;/p&gt;
&lt;p&gt;2.如果
      
    
    </summary>
    
    
      <category term="wxapp" scheme="https://callmesoul.cn/categories/wxapp/"/>
    
    
  </entry>
  
</feed>
